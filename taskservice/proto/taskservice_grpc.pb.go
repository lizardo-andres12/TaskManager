// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: proto/taskservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskServiceGRPC_CreateTask_FullMethodName  = "/TaskServiceGRPC/CreateTask"
	TaskServiceGRPC_GetTask_FullMethodName     = "/TaskServiceGRPC/GetTask"
	TaskServiceGRPC_GetAllTasks_FullMethodName = "/TaskServiceGRPC/GetAllTasks"
	TaskServiceGRPC_UpdateTask_FullMethodName  = "/TaskServiceGRPC/UpdateTask"
	TaskServiceGRPC_DeleteTask_FullMethodName  = "/TaskServiceGRPC/DeleteTask"
)

// TaskServiceGRPCClient is the client API for TaskServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceGRPCClient interface {
	CreateTask(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	GetTask(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*GetResponse, error)
	GetAllTasks(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	UpdateTask(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	DeleteTask(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type taskServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceGRPCClient(cc grpc.ClientConnInterface) TaskServiceGRPCClient {
	return &taskServiceGRPCClient{cc}
}

func (c *taskServiceGRPCClient) CreateTask(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, TaskServiceGRPC_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceGRPCClient) GetTask(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, TaskServiceGRPC_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceGRPCClient) GetAllTasks(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, TaskServiceGRPC_GetAllTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceGRPCClient) UpdateTask(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, TaskServiceGRPC_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceGRPCClient) DeleteTask(ctx context.Context, in *IDOnlyRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, TaskServiceGRPC_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceGRPCServer is the server API for TaskServiceGRPC service.
// All implementations must embed UnimplementedTaskServiceGRPCServer
// for forward compatibility.
type TaskServiceGRPCServer interface {
	CreateTask(context.Context, *CreateRequest) (*SuccessResponse, error)
	GetTask(context.Context, *IDOnlyRequest) (*GetResponse, error)
	GetAllTasks(context.Context, *IDOnlyRequest) (*GetAllResponse, error)
	UpdateTask(context.Context, *UpdateRequest) (*SuccessResponse, error)
	DeleteTask(context.Context, *IDOnlyRequest) (*SuccessResponse, error)
	mustEmbedUnimplementedTaskServiceGRPCServer()
}

// UnimplementedTaskServiceGRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceGRPCServer struct{}

func (UnimplementedTaskServiceGRPCServer) CreateTask(context.Context, *CreateRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceGRPCServer) GetTask(context.Context, *IDOnlyRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedTaskServiceGRPCServer) GetAllTasks(context.Context, *IDOnlyRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTasks not implemented")
}
func (UnimplementedTaskServiceGRPCServer) UpdateTask(context.Context, *UpdateRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceGRPCServer) DeleteTask(context.Context, *IDOnlyRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceGRPCServer) mustEmbedUnimplementedTaskServiceGRPCServer() {}
func (UnimplementedTaskServiceGRPCServer) testEmbeddedByValue()                         {}

// UnsafeTaskServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceGRPCServer will
// result in compilation errors.
type UnsafeTaskServiceGRPCServer interface {
	mustEmbedUnimplementedTaskServiceGRPCServer()
}

func RegisterTaskServiceGRPCServer(s grpc.ServiceRegistrar, srv TaskServiceGRPCServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceGRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskServiceGRPC_ServiceDesc, srv)
}

func _TaskServiceGRPC_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceGRPCServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceGRPC_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceGRPCServer).CreateTask(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceGRPC_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceGRPCServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceGRPC_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceGRPCServer).GetTask(ctx, req.(*IDOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceGRPC_GetAllTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceGRPCServer).GetAllTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceGRPC_GetAllTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceGRPCServer).GetAllTasks(ctx, req.(*IDOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceGRPC_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceGRPCServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceGRPC_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceGRPCServer).UpdateTask(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskServiceGRPC_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceGRPCServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskServiceGRPC_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceGRPCServer).DeleteTask(ctx, req.(*IDOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskServiceGRPC_ServiceDesc is the grpc.ServiceDesc for TaskServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TaskServiceGRPC",
	HandlerType: (*TaskServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _TaskServiceGRPC_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _TaskServiceGRPC_GetTask_Handler,
		},
		{
			MethodName: "GetAllTasks",
			Handler:    _TaskServiceGRPC_GetAllTasks_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskServiceGRPC_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskServiceGRPC_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/taskservice.proto",
}
