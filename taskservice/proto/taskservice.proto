syntax = "proto3";
option go_package = "taskservice/controller/proto";


// defined to allow all task details to be returned with responses
message Task {
    uint64 taskId = 1;
    string title = 2;
    string description = 3;
    uint32 status = 4;
    string deadline = 5;
    bool priority = 6;
    uint64 creatorId = 7;
}

message CreateRequest {
    string title = 1;
    bool priority = 2;
    uint64 creatorId = 3;
}

message AssignRequest {
    uint64 taskId = 1;
    uint64 assigneeId = 2;
}

message SuccessResponse {
    bool success = 1;
}

// ambiguous id so message can be used for multiple get types
message IDOnlyRequest {
    uint64 id = 1;
    // bool priorityOnly = 2;
}

message GetResponse {
    bool success = 1;
    Task task = 2;
}

message GetAllResponse {
    bool success = 1;
    repeated Task tasks = 2;
}

message UpdateStringRequest {
    uint64 taskId = 1;
    string text = 2;
}

message UpdateStatusRequest {
    uint64 taskId = 1;
    uint32 status = 2;
}

message UpdatePriorityRequest {
    uint64 taskId = 1;
    bool priority = 2;
}

service TaskServiceGRPC {
    // Create
    rpc CreateTask(CreateRequest) returns (SuccessResponse);
    rpc AssignToTask(AssignRequest) returns (SuccessResponse);

    // Read
    rpc GetTask(IDOnlyRequest) returns (GetResponse);
    rpc GetAllAssigned(IDOnlyRequest) returns (GetAllResponse);
    rpc GetAllCreated(IDOnlyRequest) returns (GetAllResponse);

    // Update
    rpc UpdateTitle(UpdateStringRequest) returns (SuccessResponse);
    rpc UpdateDescription(UpdateStringRequest) returns (SuccessResponse);
    rpc UpdateStatus(UpdateStatusRequest) returns (SuccessResponse);
    rpc UpdateDeadline(UpdateStringRequest) returns (SuccessResponse);
    rpc UpdatePriority(UpdatePriorityRequest) returns (SuccessResponse);

    // Delete
    rpc DeleteTask(IDOnlyRequest) returns (SuccessResponse);
    rpc UnassignTask(IDOnlyRequest) returns (SuccessResponse);
}
